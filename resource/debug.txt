# Docker 
docker build --tag matar86/myimdb:v2 .
#docker tag myimdb:v2 matar86/myimdb:v2
docker push matar86/myimdb:v2



# Helm
mkdir charts
cd charts
helm myimdb
---------------------------------------------------------------------------------
helm template movies .\charts\myimdb\ --output-dir .\temp\
helm install <full name override> <chart name>/ --values <chart name>/values.yaml
helm install phoenix-chart phoenixnap/ --values phoenixnap/values.yaml
helm install movies .\charts\myimdb
----------------------------------------------------------------------------------
helm template releasename . --debug
helm template releasename . -s templates/deployment.yaml
helm template releasename . -s templates/deployment.yaml --set owner=Ali
-----------------------------
k get all
-------------
k cluster-info 

Kubernetes control plane is running at https://127.0.0.1:55844
CoreDNS is running at https://127.0.0.1:55844/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.

-----
k port-forward svc/matar-myimdb 5000:5000
----
helm show chart .
10035410738
---

Container Runtime (Docker) will present a unique netwowrk namespace, and filesystem for the container.
All containers in pod share same netwowrk namespace, and Opentionally filesystem volums
Pod : containers that share same netwowrk namespace

ReplicaSet: deploy mutlipl identical pods at once. Rarely used directly.
deployment : manges ReplicaSet because lays over it Rolling update functionality
Service : provides stable netwotk address for the application inlcludingV virtual IP and local DNS entry within the cluster.

Lables at deployment Metadata tells the deployment to mange all pods with that selector.
Then, in pod selctors we add that Lable.

Service understands what pods to route traffic to based on Pod selctors.

---- Docker
WORKDIR
ENTRYPOINT VS CMD



---------------------

# Cloud Native princples:
Container package
    isolated unit of work that doesn't requireme os depencies

Dynamically managed
    actively schuled and managed by orchristaion process

Microaervice orinted
    loosly coupled with depencies explcitily described

# 
Impreative (I tell the machine what to do)  - defines actions
vs 
declarative (how I want things to be, and machine will do) - defines desired state



###
- pods : 
    smallest unit
    sepration of concernes
    one or more containers
    exist for a one reason
    charestics of pod (assumtions):
        1. all containers for pod will run on the same node/host
        2. containers within the pod can talk to each others over local host
        3. containers can share volume resouces

    main container vs sidecar containers - web app example :
    sidecar containers help :
        logic can be included in main container
        sepration allows for isolation and reuse
        each container can have seprate resource allocation

responsibilty and resuablity, standariztion

standariztion:
    REST API, all external and internal compoenents communicate via same API - Transperatcy
    explict versions
    provides abstracte layer on top of resouce storage (etcd)


- yaml
    apiVersion:
    Kind:
    Metadata:
        name:
        lables:
            app:xx
    --------------------------------- above 3 tags can considered like a header, below con consider payload (schema of the kind above)
    spec:
        containers
            xx
                xx



## kubectl
- declarative (prefered) :
    kubectl -f apply ffff.yam
- Impreative 
    kubectl create/replace/patch/edit xxx



- Service
    load balance for pods
    use lables to determie the target pods
    services are not processes, it's more configrations and Metadata

- deployment
    Metadata.name (is unique) .. think of have 20 replicas of our pod !! that's not the case when we use deployment
    Pod spec is nested
    leverage Selectors

- lables
    map key/value
    both orignizal and functionl (selectors in the service)
    indexed and serachable

    avoid compound lables values
        app: blog-frontend (compound)
        app: blog / tier: frontend (better, seprate)

    try to stanized key/value across the cluster

### Cloud Run
## build
docker build --tag gomovies:python .

## run locally
docker run --rm -p 9090:8080 -e PORT=8080 gomovies:python

## Deploy
# Set an environment variable with your GCP Project ID
export GOOGLE_CLOUD_PROJECT=<PROJECT_ID>

# Submit a build using Google Cloud Build
gcloud builds submit --tag gcr.io/${GOOGLE_CLOUD_PROJECT}/helloworld

# Deploy to Cloud Run
gcloud run deploy helloworld \
--image gcr.io/${GOOGLE_CLOUD_PROJECT}/helloworld